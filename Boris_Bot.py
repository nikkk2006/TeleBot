import telebot
from telebot import types
import webbrowser
import qrcode
import requests
from bs4 import BeautifulSoup
import random
from datetime import datetime
from pyowm import OWM
from pyowm.utils.config import get_default_config
from currency_converter import CurrencyConverter


def get_now_date():
    return datetime.now().strftime(f'%d/%b/%Y %H:%M')

def get_joke():
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —à—É—Ç–æ–∫"""
    URL = "https://www.anekdot.ru/last/good/"

    request = requests.get(URL)
    soup = BeautifulSoup(request.text, "html.parser")
    jokes = soup.find_all("div", class_="text")
    clear_jokes = [joke.text for joke in jokes]

    return clear_jokes

def get_data():
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –±–∏—Ç–∫–∞"""

    request = requests.get("https://yobit.net/api/3/ticker/btc_usd")
    response = request.json()

    # —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏/–ø–æ–∫—É–ø–∫–∏ –±–∏—Ç–∫–∞
    sell_price = round(response["btc_usd"]["sell"], 2)
    buy_price = round(response["btc_usd"]["buy"], 2)

    return f"{get_now_date()}\nSell price: {sell_price}\nBuy price: {buy_price}"

def main():
    bot = telebot.TeleBot("6271994553:AAGJx3KkAONcDibJMaAdRgzYOw2P_YqPz-g")
    currency = CurrencyConverter()

    def get_qrcode(message):
        image = qrcode.make(message.text)
        image.save("myqrcode.png")

        with open("myqrcode.png", "rb") as file:
            bot.send_photo(message.chat.id, file)

    def get_weather(message):
        """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ"""

        language = get_default_config()
        language["language"] = "ru"
        owm = OWM('23232775d430e5fe2ac9a9c2cbdb8410', language)

        manager = owm.weather_manager()

        try:
            city = message.text
            place = manager.weather_at_place(city)

            weather = place.weather
            result_of_weather = f"""
–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ: {weather.detailed_status}
–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather.clouds}%
–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temperature("celsius").get("temp")} –≥—Ä–∞–¥—É—Å–æ–≤
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temperature("celsius").get("temp_max")} –≥—Ä–∞–¥—É—Å–æ–≤
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temperature("celsius").get("temp_min")} –≥—Ä–∞–¥—É—Å–æ–≤
–°–µ–π—á–∞—Å –æ—â—É—â–∞–µ—Ç—Å—è: {weather.temperature("celsius").get("feels_like")} –≥—Ä–∞–¥—É—Å–æ–≤
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather.wind()["speed"]}–º/c
    """
            bot.send_message(message.chat.id, result_of_weather)

        except:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞((\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
            bot.register_next_step_handler(message, get_weather)

    def choose_currency(message):
        global ANSWER

        try:
            ANSWER = int(message.text.strip())
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            bot.register_next_step_handler(message, choose_currency)

            # —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è
            return

        if ANSWER > 0:
            markup = types.InlineKeyboardMarkup(row_width=2)
            button_1 = types.InlineKeyboardButton("USD/EUR", callback_data="USD/EUR")
            button_2 = types.InlineKeyboardButton("EUR/USD", callback_data="EUR/USD")
            button_3 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="else")
            markup.add(button_1, button_2, button_3)

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            bot.register_next_step_handler(message, choose_currency)

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):

        if call.data != "else":
            values = call.data.split('/')
            result = currency.convert(ANSWER, values[0], values[1])

            value = f"""
            {get_now_date()}
            –ü–æ–ª—É—á–∞–µ—Ç—Å—è: {round(result, 2)}
            """
            bot.send_message(call.message.chat.id, value)
        else:
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ —Å–ª—ç—à:")
            bot.register_next_step_handler(call.message, my_currency)

    def my_currency(message):

        try:
            values = message.text.upper().split("/")
            result = currency.convert(ANSWER, values[0], values[1])

            value = f"{get_now_date()}\n–ü–æ–ª—É—á–∞–µ—Ç—Å—è: {round(result, 2)}"
            bot.send_message(message.chat.id, value)
        except:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ —Å–ª—ç—à:")
            bot.register_next_step_handler(message, my_currency)

    @bot.message_handler(content_types=["photo"])
    def get_photo(message):
        bot.reply_to(message, "–ö–∞–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ!")

    @bot.message_handler(content_types=["video"])
    def get_video(message):
        bot.reply_to(message, "–ö–∞–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –≤–∏–¥–µ–æ!")

    @bot.message_handler(commands=["start"])
    def start(message):

        info_about_bot = """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:
"–ü—Ä–∏–≤–µ—Ç" - –±–æ—Ç –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å
"–ü–æ–∫–∞" - –±–æ—Ç –ø–æ–ø—Ä–æ—â–∞–µ—Ç—Å—è —Å –≤–∞–º–∏
"id" - –±–æ—Ç —Å–∫–∞–∂–µ—Ç –≤–∞—à id
"convert" - –±–æ—Ç —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É
"–Æ—Ç—É–±" - –æ—Ç–∫—Ä–æ–µ—Ç —é—Ç—É–± –≤ –±—Ä–∞—É–∑–µ—Ä–µ
"qrcode" - —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ QRCode
"bitcoin" - –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É –±–∏—Ç–∫–æ–∏–Ω–∞
"–ü–æ–≥–æ–¥–∞" - –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–≥–æ–¥—ã
"–ê–Ω–µ–∫–¥–æ—Ç" - –±–æ—Ç —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç
"–î–∞—Ç–∞" - –±–æ—Ç —Å–∫–∞–∂–µ—Ç —Ç–æ—á–Ω—É—é –¥–∞—Ç—É
-–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –æ–Ω –æ—Ü–µ–Ω–∏—Ç 
"""

        bot.send_message(message.chat.id, info_about_bot)

    @bot.message_handler()
    def answers(message):

        if message.text.lower() == "–ø—Ä–∏–≤–µ—Ç":
            bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")

        elif message.text.lower() == "–ø–æ–∫–∞":
            bot.send_message(message.chat.id, f"–ü–æ–∫–∞, {message.from_user.first_name}!")

        elif message.text.lower() == "id":
            bot.reply_to(message, f"ID: {message.from_user.id}")

        elif message.text.lower() == "—é—Ç—É–±":
            webbrowser.open("https://www.youtube.com/")

        elif message.text.lower() == "bitcoin":
            bot.send_message(message.chat.id, get_data())

        elif message.text.lower() == "–ø–æ–≥–æ–¥–∞":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
            bot.register_next_step_handler(message, get_weather)

        elif message.text.lower() == "–∞–Ω–µ–∫–¥–æ—Ç":
            joke = random.choice(get_joke())
            bot.send_message(message.chat.id, joke)

        elif message.text.lower() == "convert":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            bot.register_next_step_handler(message, choose_currency)

        elif message.text.lower() == "–¥–∞—Ç–∞":
            bot.send_message(message.chat.id, get_now_date())

        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è qrcode
        elif message.text.lower() == "qrcode":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ qrcode:")
            bot.register_next_step_handler(message, get_qrcode)

        else:
            bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ãüòû")

    bot.polling(none_stop=True)


if __name__ == '__main__':
    main()



